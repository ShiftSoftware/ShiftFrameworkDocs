{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"project-setup/overview/","title":"Overview","text":"<p>A typical solution built with Shift Framework consists of 6 projects. Below is a sample solution named StockPlusPlus <pre><code>StockPlusPlus\n\u251c\u2500 StockPlusPlus.API        &lt;--- (.NET 7 AspNet Core Web API)\n\u251c\u2500 StockPlusPlus.Data       &lt;--- (.NET 6 Class Library)\n\u251c\u2500 StockPlusPlus.Functions  &lt;--- (.NET 6 Azure Functions)\n\u251c\u2500 StockPlusPlus.Shared     &lt;--- (.NET 6 Class Library)\n\u251c\u2500 StockPlusPlus.Test       &lt;--- (.NET 7 xUnit Test Project)\n\u251c\u2500 StockPlusPlus.Web        &lt;--- (.NET 7 Blazor WASM)\n</code></pre></p> <p>Below is an overal view inside the solution projects. Some default folders and items like (Dependencies, Properties) are not shown for similicity.</p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u251c\u2500\u2500 appsettings.json\n\u2502   \u251c\u2500\u2500 Program.cs\n\u2502   \u251c\u2500\u2500 WebMarker.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions\n\u2502   \u251c\u2500\u2500 Functions\n\u2502   \u251c\u2500\u2500 host.json\n\u2502   \u251c\u2500\u2500 local.settings.json\n\u2502   \u251c\u2500\u2500 Startup.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Shared\n\u2502   \u251c\u2500\u2500 ActionTrees\n\u2502   \u251c\u2500\u2500 Constants\n\u2502   \u251c\u2500\u2500 DTOs\n\u2502   \u251c\u2500\u2500 Enums\n\u2502 \n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n\u2502   \u251c\u2500\u2500 wwwroot\n\u2502   \u251c\u2500\u2500 Pages\n\u2502   \u251c\u2500\u2500 Shared\n\u2502   \u251c\u2500\u2500 _Imports.razor\n\u2502   \u251c\u2500\u2500 App.razor\n\u2502   \u251c\u2500\u2500 Program.cs\n\u2502   \u251c\u2500\u2500 staticwebapp.config.json\n</code></pre>"},{"location":"project-setup/api-project/dependencies/","title":"Dependencies","text":"<p>The API Project is the AspNet Core Web API</p>"},{"location":"project-setup/api-project/dependencies/#project-dependencies","title":"Project Dependencies","text":"<p>The API Project is referencing the Data Project &amp; Web Project. <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API        \n\u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u251c\u2500\u2500 appsettings.json\n\u2502   \u251c\u2500\u2500 Program.cs\n\u2502   \u251c\u2500\u2500 WebMarker.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Data       &lt;--- (Referenced by API Directly)\n\u251c\u2500 StockPlusPlus.Functions  \n\u251c\u2500 StockPlusPlus.Shared     &lt;--- (Referenced by API via Data)\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web        &lt;--- (Referenced by API Directly)\n</code></pre></p>"},{"location":"project-setup/api-project/dependencies/#package-dependencies","title":"Package Dependencies","text":"<p>The API Project requires the following Shift Framework Packages.  </p> <pre><code>ShiftSoftware.ShiftEntity.Web\n</code></pre> <pre><code>ShiftSoftware.ShiftIdentity.Dashboard.AspNetCore\n</code></pre> <p>Warning</p> <p><code>ShiftSoftware.ShiftIdentity.Dashboard.AspNetCore</code> is only required if Shift Identity is included in your app. If you're using an External Shift Identity then no need to install this package.</p> <p>Available as nuget packages:  ShiftSoftware.ShiftEntity.Web and ShiftSoftware.ShiftIdentity.Dashboard.AspNetCore</p>"},{"location":"project-setup/api-project/program.cs/","title":"Program.cs Example","text":"<pre><code>using Microsoft.EntityFrameworkCore;\nusing ShiftSoftware.ShiftIdentity.AspNetCore.Models;\nusing ShiftSoftware.ShiftIdentity.AspNetCore;\nusing ShiftSoftware.ShiftIdentity.Core;\nusing StockPlusPlus.Data;\nusing ShiftSoftware.ShiftIdentity.Dashboard.AspNetCore.Extentsions;\nusing ShiftSoftware.ShiftIdentity.AspNetCore.Extensions;\nusing ShiftSoftware.TypeAuth.AspNetCore.Extensions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nAction&lt;DbContextOptionsBuilder&gt; dbOptionBuilder = x =&gt;\n{\n    x.UseSqlServer(\"Server=localhost\\\\sqlexpress;Initial Catalog=StockPlusPlus;Persist Security Info=True;Integrated Security=SSPI;TrustServerCertificate=True;\")\n    .UseTemporal(true);\n};\n\nbuilder.Services.AddDbContext&lt;DB&gt;(dbOptionBuilder);\n\nbuilder.Services.RegisterShiftRepositories(typeof(StockPlusPlus.Data.Marker).Assembly);\n\nbuilder.Services.AddTypeAuth((o) =&gt;\n{\n    o.AddActionTree&lt;ShiftIdentityActions&gt;();\n    o.AddActionTree&lt;StockPlusPlus.Shared.ActionTrees.SystemActionTrees&gt;();\n    o.AddActionTree&lt;StockPlusPlus.Shared.ActionTrees.StockActionTrees&gt;();\n});\n\n#if DEBUG\nbuilder.Services.AddRazorPages();\n#endif\n\nvar mvcBuilder = builder.Services\n    .AddLocalization()\n    .AddHttpContextAccessor()\n    .AddControllers();\n\nmvcBuilder.AddShiftEntityWeb(x =&gt;\n{\n    x.WrapValidationErrorResponseWithShiftEntityResponse(true);\n\n    x.AddAutoMapper(typeof(StockPlusPlus.Data.Marker).Assembly);\n\n    x.HashId.RegisterHashId(false);\n\n    x.HashId.RegisterIdentityHashId(\"one-two\", 5);\n\n    x.AddShiftIdentityAutoMapper();\n});\n\nmvcBuilder.AddShiftEntityOdata(x =&gt;\n{\n    x.DefaultOptions();\n\n    x.RegisterAllDTOs(typeof(StockPlusPlus.Shared.Marker).Assembly);\n    x.RegisterShiftIdentityDashboardEntitySets();\n});\n\nmvcBuilder.AddShiftIdentity(\"StockPlusPlus\", \"one-two-three-four-five-six-seven-eight.one-two-three-four-five-six-seven-eight\");\n\nmvcBuilder.AddShiftIdentityDashboard&lt;DB&gt;(\n    new ShiftIdentityConfiguration\n    {\n        ShiftIdentityHostingType = ShiftIdentityHostingTypes.Internal,\n        Token = new TokenSettingsModel\n        {\n            ExpireSeconds = 60000,\n            Issuer = \"StockPlusPlus\",\n            Key = \"one-two-three-four-five-six-seven-eight.one-two-three-four-five-six-seven-eight\",\n        },\n        Security = new SecuritySettingsModel\n        {\n            LockDownInMinutes = 0,\n            LoginAttemptsForLockDown = 1000000,\n            RequirePasswordChange = false\n        },\n        RefreshToken = new TokenSettingsModel\n        {\n            Audience = \"stock-plus-plus\",\n            ExpireSeconds = 60000000,\n            Issuer = \"StockPlusPlus\",\n            Key = \"one-two-three-four-five-six-seven-eight.one-two-three-four-five-six-seven-eight\",\n        },\n        HashIdSettings = new HashIdSettings\n        {\n            AcceptUnencodedIds = true,\n            UserIdsSalt = \"k02iUHSb2ier9fiui02349AbfJEI\",\n            UserIdsMinHashLength = 5\n        },\n    }\n);\n\nvar app = builder.Build();\n\nawait app.SeedDBAsync(\n    \"SuperUser\",\n    \"OneTwo\",\n    new ShiftSoftware.ShiftIdentity.Data.DBSeedOptions\n    {\n        RegionExternalId = \"1\",\n        RegionShortCode = \"KRG\",\n\n        CompanyShortCode = \"SFT\",\n        CompanyExternalId = \"-1\",\n        CompanyAlternativeExternalId = \"shift-software\",\n        CompanyType = ShiftSoftware.ShiftIdentity.Core.Enums.CompanyTypes.NotSpecified,\n\n        CompanyBranchExternalId = \"-11\",\n        CompanyBranchShortCode = \"SFT-EBL\"\n    }\n);\n\n\n#if DEBUG\napp.UseBlazorFrameworkFiles();\napp.UseStaticFiles();\n#endif\n\napp.MapControllers();\n\n#if DEBUG\n\napp.MapRazorPages();\napp.MapFallbackToFile(\"index.html\");\n\n#endif\n\napp.Run();\n</code></pre>"},{"location":"project-setup/api-project/setup-and-configurations/","title":"Setup, Configurations &amp; Dependency Injection","text":""},{"location":"project-setup/api-project/setup-and-configurations/#ef-core-database","title":"EF Core &amp; Database","text":"<pre><code>Action&lt;DbContextOptionsBuilder&gt; dbOptionBuilder = x =&gt;\n{\n    x.UseSqlServer(\"Server=localhost\\\\sqlexpress;Initial Catalog=StockPlusPlus;Persist Security Info=True;Integrated Security=SSPI;TrustServerCertificate=True;\")\n    .UseTemporal(true);\n};\n\nbuilder.Services.AddDbContext&lt;DB&gt;(dbOptionBuilder);\n</code></pre>"},{"location":"project-setup/api-project/setup-and-configurations/#register-repositories","title":"Register Repositories","text":"<p>You can register the repositories one by one. Or use the <code>RegisterShiftRepositories</code> extension method. <pre><code>builder.Services.RegisterShiftRepositories(\n    typeof(StockPlusPlus.Data.Marker).Assembly\n);\n</code></pre></p>"},{"location":"project-setup/api-project/setup-and-configurations/#typeauth-action-trees","title":"TypeAuth &amp; Action Trees","text":"<p>Enable TypeAuth and Register the Action Trees <pre><code>builder.Services.AddTypeAuth((o) =&gt;\n{\n    o.AddActionTree&lt;ShiftIdentityActions&gt;();\n    o.AddActionTree&lt;StockPlusPlus.Shared.ActionTrees.SystemActionTrees&gt;();\n    o.AddActionTree&lt;StockPlusPlus.Shared.ActionTrees.StockActionTrees&gt;();\n});\n</code></pre></p>"},{"location":"project-setup/api-project/setup-and-configurations/#shift-entity-web","title":"Shift Entity Web","text":"<p>Enables the Shift Entity and provides an option for configuring it. <pre><code>mvcBuilder.AddShiftEntityWeb(x =&gt;\n{\n    x.WrapValidationErrorResponseWithShiftEntityResponse(true);\n\n    x.AddAutoMapper(typeof(StockPlusPlus.Data.Marker).Assembly);\n\n    x.HashId.RegisterHashId(false);\n\n    x.HashId.RegisterIdentityHashId(\"one-two\", 5);\n\n    x.AddShiftIdentityAutoMapper();\n});\n</code></pre></p>"},{"location":"project-setup/api-project/setup-and-configurations/#odata","title":"Odata","text":"<p>Enable and Configure oData. <pre><code>mvcBuilder.AddShiftEntityOdata(x =&gt;\n{\n    x.DefaultOptions();\n    x.RegisterAllDTOs(typeof(StockPlusPlus.Shared.Marker).Assembly);\n    x.RegisterShiftIdentityDashboardEntitySets();\n});\n</code></pre> The <code>RegisterAllDTOs</code> registers all oData endpoints by convention for all Listing DTOs.  You can also register them one by one if you want.</p> <pre><code>mvcBuilder.AddShiftEntityOdata(x =&gt;\n{\n    x.DefaultOptions();\n\n    //enables odata/Product endpoint\n    x.OdataEntitySet&lt;ProductListDTO&gt;(\"Product\");\n\n    //enables odata/ProductCategory endpoint\n    x.OdataEntitySet&lt;ProductCategoryListDTO&gt;(\"ProductCategory\");\n    //...etc\n\n    x.RegisterShiftIdentityDashboardEntitySets();\n});\n</code></pre>"},{"location":"project-setup/api-project/setup-and-configurations/#shift-identity","title":"Shift Identity","text":"<p>Enables the Shift Identity by providing an Issuer and a Key. <pre><code>mvcBuilder.AddShiftIdentity(\n    \"StockPlusPlus\", \n    \"one-two-three-four-five-six-seven-eight.one-two-three-four-five-six-seven-eight\"\n);\n</code></pre></p>"},{"location":"project-setup/api-project/setup-and-configurations/#shift-identity-dashboard","title":"Shift Identity Dashboard","text":"<p>If your app is hosting Shift Identity Internally, below will add the dashboard. <pre><code>mvcBuilder.AddShiftIdentityDashboard&lt;DB&gt;(\n    new ShiftIdentityConfiguration\n    {\n        ShiftIdentityHostingType = ShiftIdentityHostingTypes.Internal,\n        Token = new TokenSettingsModel\n        {\n            ExpireSeconds = 60000,\n            Issuer = \"StockPlusPlus\",\n            Key = \"one-two-three-four-five-six-seven-eight.one-two-three-four-five-six-seven-eight\",\n        },\n        Security = new SecuritySettingsModel\n        {\n            LockDownInMinutes = 0,\n            LoginAttemptsForLockDown = 1000000,\n            RequirePasswordChange = false\n        },\n        RefreshToken = new TokenSettingsModel\n        {\n            Audience = \"stock-plus-plus\",\n            ExpireSeconds = 60000000,\n            Issuer = \"StockPlusPlus\",\n            Key = \"one-two-three-four-five-six-seven-eight.one-two-three-four-five-six-seven-eight\",\n        },\n        HashIdSettings = new HashIdSettings\n        {\n            AcceptUnencodedIds = true,\n            UserIdsSalt = \"k02iUHSb2ier9fiui02349AbfJEI\",\n            UserIdsMinHashLength = 5\n        },\n    }\n);\n</code></pre></p> <p>The Shift Identity Dashboard provides a Seed method to configure the defaults <pre><code>await app.SeedDBAsync(\n    \"SuperUser\",\n    \"OneTwo\",\n    new ShiftSoftware.ShiftIdentity.Data.DBSeedOptions\n    {\n        RegionExternalId = \"1\",\n        RegionShortCode = \"KRG\",\n\n        CompanyShortCode = \"SFT\",\n        CompanyExternalId = \"-1\",\n        CompanyAlternativeExternalId = \"shift-software\",\n        CompanyType = ShiftSoftware.ShiftIdentity.Core.Enums.CompanyTypes.NotSpecified,\n\n        CompanyBranchExternalId = \"-11\",\n        CompanyBranchShortCode = \"SFT-EBL\"\n    }\n);\n</code></pre></p>"},{"location":"project-setup/data-project/auto-mapper-profiles/","title":"AutoMapper Profiles","text":"<p>Shift Framework is using AutoMapper to map from and to Entities.</p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502       \u251c\u2500\u2500 ProductCategory.cs\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 ReplicationModels\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre> <p>A simple Mapping Profile looks like this:</p> <pre><code>public class ProductCategory : Profile\n{\n    public ProductCategory()\n    {\n        //Maps Entity to DTO. Then DTO to Entity by calling ReverseMap()\n        CreateMap&lt;Entities.Product.ProductCategory, ProductCategoryDTO&gt;()\n            .ReverseMap();\n\n        CreateMap&lt;Entities.Product.ProductCategory, ProductCategoryListDTO&gt;();\n    }\n}\n</code></pre>"},{"location":"project-setup/data-project/db-context/","title":"DB Context","text":"<p>Depending on your Shift Identity setup, The following DB Contexts are available: <code>ShiftDbContext</code> and <code>ShiftIdentityDbContext</code>.</p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 ReplicationModels\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre>"},{"location":"project-setup/data-project/db-context/#shiftdbcontext","title":"ShiftDbContext","text":"<p>Use this if the app is connected to an external Shift Identity. In this case your database does not need to include the identity related entites (Users, Companies ...etc).</p> <pre><code>public class DB : ShiftDbContext\n{\n    public DB(DbContextOptions option) : base(option)\n    {\n    }\n\n    public DbSet&lt;Brand&gt; Brands { get; set; }\n    public DbSet&lt;ProductCategory&gt; ProductCategories { get; set; }\n    public DbSet&lt;Product&gt; Products { get; set; }\n}\n</code></pre>"},{"location":"project-setup/data-project/db-context/#shiftidentitydbcontext","title":"ShiftIdentityDbContext","text":"<p>Use this if the Identity App is required to be included within your app. In this case your database needs to include the identity related entites (Users, Companies ...etc).</p> <pre><code>public class DB : ShiftIdentityDbContext\n{\n    public DB(DbContextOptions option) : base(option)\n    {\n    }\n\n    public DbSet&lt;Brand&gt; Brands { get; set; }\n    public DbSet&lt;ProductCategory&gt; ProductCategories { get; set; }\n    public DbSet&lt;Product&gt; Products { get; set; }\n}\n</code></pre>"},{"location":"project-setup/data-project/dependencies/","title":"Dependencies","text":"<p>The Data Project is where you place the following:</p> <ul> <li>DB Context</li> <li>Entities</li> <li>Migrations </li> <li>Repositories</li> <li>Automapper Profiles</li> <li>Optionally, if CosmosDB Replication is enabled, the Replication Models are also stored in the Data Project</li> </ul>"},{"location":"project-setup/data-project/dependencies/#project-dependencies","title":"Project Dependencies","text":"<p>The Data Project is referencing the Shared Project only. <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API        &lt;--- (References Data)\n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 ReplicationModels\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions  &lt;--- (References Data)\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test       &lt;--- (References Data Directly or through API)\n\u251c\u2500 StockPlusPlus.Web\n</code></pre></p>"},{"location":"project-setup/data-project/dependencies/#package-dependencies","title":"Package Dependencies","text":"<p>The Data Project requires the following Shift Framework packages.  </p> <pre><code>ShiftSoftware.ShiftEntity.EFCore\n</code></pre> <pre><code>ShiftSoftware.ShiftIdentity.Data\n</code></pre> <p>Warning</p> <p><code>ShiftSoftware.ShiftIdentity.Data</code> is only required if Shift Identity is included in your app. If you're using an External Shift Identity then no need to install this package.</p> <p>Available as nuget packages:  ShiftSoftware.ShiftEntity.EFCore and ShiftSoftware.ShiftIdentity.Data</p>"},{"location":"project-setup/data-project/entities/","title":"Entities","text":"<p>Shift Framework is using EF Core 6. And most entities need to inherit from <code>ShiftEntity</code></p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502   \u251c\u2500\u2500 Entities\n\u2502       \u251c\u2500\u2500 Brand.cs\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 ReplicationModels\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre>"},{"location":"project-setup/data-project/entities/#shift-entity","title":"Shift Entity","text":"<p>Entities inheriting from <code>ShiftEntity</code> seamlessly integrate with the framework. </p> <pre><code>public class Brand : ShiftEntity&lt;Brand&gt;\n{\n    public string Name { get; set; } = default!;\n    public string? Description { get; set; }\n    public string? Code { get; set; }\n}\n</code></pre> <p>The <code>ShiftEntity</code> base class will add the following properties:</p> Property Type Description ID long The primary key of the entity. CreateDate DateTimeOffset The UTC datetime assigned during creation and never updated. LastSaveDate DateTimeOffset The UTC datetime of the last time this entity is saved (Created, Updated, or Deleted)). LastReplicationDate DateTimeOffset? The UTC datetime of the last time the entity has been replicated to CosmosDB. CreatedByUserID long? The User ID assigned during creation and never updated. LastSavedByUserID long? The User ID of the last user that has saved the entity (Created, Updated, or Deleted). IsDeleted bool Soft Delete Flag. RegionID long? The Region ID assigned during creation and never updated. CompanyID long? The Company ID assigned during creation and never updated. CompanyBranchID long? The Company Branch ID assigned during creation and never updated."},{"location":"project-setup/data-project/entities/#temporal-system-versioned","title":"Temporal (System Versioned)","text":"<p>Use the <code>TemporalShiftEntity</code> attribute to enable Temporal Table (Currently available on SQL Server Only).</p> <pre><code>[TemporalShiftEntity]\npublic class Brand : ShiftEntity&lt;Brand&gt;\n{\n    public string Name { get; set; } = default!;\n    public string? Description { get; set; }\n    public string? Code { get; set; }\n}\n</code></pre>"},{"location":"project-setup/data-project/entities/#shift-entity-key-and-name","title":"Shift Entity Key And Name","text":"<p>There are certain features in the Framework that requires you to specify a Key and Name property for an entity.  </p> <p>This can be specified using the <code>ShiftEntityKeyAndName</code> attribute.</p> <pre><code>[TemporalShiftEntity]\n[ShiftEntityKeyAndName(nameof(ID), nameof(Name))]\npublic class Brand : ShiftEntity&lt;Brand&gt;\n{\n    public string Name { get; set; } = default!;\n    public string? Description { get; set; }\n    public string? Code { get; set; }\n}\n</code></pre>"},{"location":"project-setup/data-project/migrations/","title":"Migrations","text":"<pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 ReplicationModels\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre> <p>The DB registration and the connection strings are in API or/and Functions Project. But we want the migrations to be inside the Data Project. </p> <p>For this we need to specify both projects when running migration commands.</p> Package Manager.NET CLI <pre><code>Add-Migration name -Project StockPlusPlus.Data -StartupProject StockPlusPlus.API\n\nUpdate-Database -Project StockPlusPlus.Data -StartupProject StockPlusPlus.API\n</code></pre> <pre><code>dotnet ef migrations add name --project StockPlusPlus.Data --startup-project StockPlusPlus.API\n\ndotnet ef database update --project StockPlusPlus.Data --startup-project StockPlusPlus.API\n</code></pre>"},{"location":"project-setup/data-project/repositories/","title":"Repositories","text":"<p>Shift Framework provides a default repository implementation called <code>ShiftRepository</code>.  The <code>ShiftRepository</code> seamlessly integrates with the other parts of the Framework.</p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u2502   \u251c\u2500\u2500 AutoMapperProfiles\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u251c\u2500\u2500 Migrations\n\u2502   \u251c\u2500\u2500 ReplicationModels\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u251c\u2500\u2500 DB.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre>"},{"location":"project-setup/data-project/repositories/#shift-repository","title":"Shift Repository","text":"<p>A simple repository can be created by inheriting from  <code>ShiftRepository&lt;DB, Entity, ListDTO, ViewAndUpsertDTO&gt;</code></p> <pre><code>using ShiftSoftware.ShiftEntity.EFCore;\nusing StockPlusPlus.Shared.DTOs.Product.Brand;\n\npublic class BrandRepository : \n    ShiftRepository&lt;DB, Entities.Product.Brand, BrandListDTO, BrandDTO&gt;\n{\n    public BrandRepository(DB db) : base(db)\n    {\n    }\n}\n</code></pre>"},{"location":"project-setup/data-project/repositories/#default-shiftrepository-functions","title":"Default ShiftRepository Functions","text":"<p>Note</p> <p>If you're using <code>ShiftEntity.Web</code>, the default controller provides implementation for CRUD operations and data listing.  In this case you don't need to manualy invoke the default repository functions.</p> <p>But in case you do need to call the default repository functions. Below are some examples:</p>"},{"location":"project-setup/data-project/repositories/#create","title":"Create","text":"<pre><code>var createdBrand = await this.brandRepository.UpsertAsync(\n    entity: new Brand(),\n    dto: new BrandDTO { Name = \"One\" },\n    actionType: ShiftSoftware.ShiftEntity.Core.ActionTypes.Insert,\n    userId: null\n);\n\nthis.brandRepository.Add(createdBrand);\n\nawait this.brandRepository.SaveChangesAsync();\n</code></pre>"},{"location":"project-setup/data-project/repositories/#find","title":"Find","text":"<pre><code>var brandEntity = await this.brandRepository.FindAsync(1);\n</code></pre>"},{"location":"project-setup/data-project/repositories/#view","title":"View","text":"<pre><code>var brandDto = await this.brandRepository.ViewAsync(\n    await this.brandRepository.FindAsync(1)\n);\n</code></pre>"},{"location":"project-setup/data-project/repositories/#update","title":"Update","text":"<pre><code>var updatedBrand = await this.brandRepository.UpsertAsync(\n    entity: await this.brandRepository.FindAsync(1), \n    dto: new BrandDTO { ID = \"1\", Name = \"Updated\" }, \n    actionType: ShiftSoftware.ShiftEntity.Core.ActionTypes.Update, \n    userId: null\n);\n\nawait this.brandRepository.SaveChangesAsync();\n</code></pre>"},{"location":"project-setup/data-project/repositories/#delete","title":"Delete","text":"<pre><code>var deletedBrand = await this.brandRepository.DeleteAsync(\n    entity: await this.brandRepository.FindAsync(1),\n    isHardDelete: false,\n    userId: null\n);\n\nawait this.brandRepository.SaveChangesAsync();\n</code></pre>"},{"location":"project-setup/data-project/repositories/#overriding-default-functions","title":"Overriding Default Functions","text":"<p>All the default functions in the <code>ShiftRepository</code> are virtual and can be overridden.  </p> <pre><code>using AutoMapper;\nusing ShiftSoftware.ShiftEntity.EFCore;\nusing StockPlusPlus.Shared.DTOs.Product.Brand;\n\npublic class BrandRepository : \n    ShiftRepository&lt;DB, Entities.Product.Brand, BrandListDTO, BrandDTO&gt;\n{\n    public BrandRepository(DB db, IMapper mapper) : base(db, db.Brands, mapper)\n    {\n    }\n\n    public override async ValueTask&lt;Brand&gt; UpsertAsync(Brand entity, BrandDTO dto, ActionTypes actionType, long? userId = null)\n    {\n        //Do something here\n\n        return await base.UpsertAsync(entity, dto, actionType, userId);\n    }\n\n    public override ValueTask&lt;BrandDTO&gt; ViewAsync(Brand entity)\n    {\n        //Do something here\n        return base.ViewAsync(entity);\n    }\n}\n</code></pre>"},{"location":"project-setup/data-project/repositories/#include-related-entities","title":"Include Related Entities","text":"<p>The base constructor of the ShiftRepository accepts an action for configuring <code>ShiftRepositoryOptions</code>.   </p> <p>The <code>IncludeRelatedEntitiesWithFindAsync</code> method can be used to include one or more related entities.</p> <pre><code>public ProductRepository(DB db) :base(db, \n    x =&gt; x.IncludeRelatedEntitiesWithFindAsync(\n        y =&gt; y.Include(z =&gt; z.Brand),\n        y =&gt; y.Include(z =&gt; z.ProductCategory)\n    ))\n{\n}\n</code></pre> <p>Note</p> <p>When related entities are included, the framework makes an additional roundtrip to the database by calling <code>FindAsync</code> after every <code>SaveChangeAsync</code>.  </p> <p>This ensures that when a entities are added or updated, their related entities are included with the returned DTO.</p>"},{"location":"project-setup/shared-project/action-trees/","title":"Action Trees","text":"<p>Actions and Action Trees are part of TypeAuth library.</p> <p>ActionTree is a hierarchical representation of the actions that an actor is authorized to perform. It's a collection of actions that are organized into a tree structure.   </p> <pre><code>[ActionTree(\"Stock\", \"Stock\")]\npublic class StockActionTrees\n{\n    public readonly static ReadWriteDeleteAction Brand = new(\"Brand\");\n    public readonly static ReadWriteDeleteAction ProductCategory = new(\"Product Category\");\n    public readonly static ReadWriteDeleteAction Product = new(\"Product\");\n}\n</code></pre> <p>Each node in the tree represents an action, and the child nodes represent sub-actions that are related to the parent action.</p> <pre><code>[ActionTree(\"Stock\", \"Stock\")]\npublic class StockActionTrees\n{\n    public readonly static ReadWriteDeleteAction Brand = new(\"Brand\");\n    public readonly static ReadWriteDeleteAction ProductCategory = new(\"Product Category\");\n    public readonly static ReadWriteDeleteAction Product = new(\"Product\");\n\n    [ActionTree(\"Data Level Access\", \"Data Level or Row-Level Access\")]\n    public class DataLevelAccess\n    {\n        public readonly static DynamicReadWriteDeleteAction Brand = new(\"Brand\"); \n        public readonly static DynamicReadWriteDeleteAction ProductCategory = new(\"Product Category\"); \n    }\n}\n</code></pre> <p>Note</p> <p>The ActionTrees and the Actions are simple strongly typed representations of the capabilities of the system that need to be authorized.  </p> <p>They're later used by the TypeAuth libraries to secure end-points, UI elements, and other resources.</p>"},{"location":"project-setup/shared-project/dependencies/","title":"Dependencies","text":"<p>The Shared project is where you place the common classes that are used by most of the other projects.  </p>"},{"location":"project-setup/shared-project/dependencies/#project-dependencies","title":"Project Dependencies","text":"<p>The Shared Project is not dependent on any other project. But almost all the other projects will reference the shared project. <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API        &lt;--- (References Shared through Data)\n\u251c\u2500 StockPlusPlus.Data       &lt;--- (References Shared Directly)\n\u251c\u2500 StockPlusPlus.Functions  &lt;--- (References Shared through Data)\n\u251c\u2500 StockPlusPlus.Shared\n\u2502   \u251c\u2500\u2500 ActionTrees\n\u2502   \u251c\u2500\u2500 Constants\n\u2502   \u251c\u2500\u2500 DTOs\n\u2502   \u251c\u2500\u2500 Enums\n\u2502 \n\u251c\u2500 StockPlusPlus.Test       &lt;--- (References Shared through API or Data)\n\u251c\u2500 StockPlusPlus.Web        &lt;--- (References Shared Directly)\n</code></pre></p>"},{"location":"project-setup/shared-project/dependencies/#package-dependencies","title":"Package Dependencies","text":"<p>The Shared project is kept clean and has very few package dependencies since it's referenced by many projects with different SDKs.  </p> <p>Below are the required Shift Framework packages.  </p> <pre><code>ShiftSoftware.ShiftEntity.Model\n</code></pre> <pre><code>ShiftSoftware.TypeAuth.Core\n</code></pre> <p>Available as nuget packages:  ShiftSoftware.ShiftEntity.Model and ShiftSoftware.TypeAuth.Core</p> <p>Warning</p> <p>Be considerate when installing new packages to the Shared project. Keep in mind that it's referenced by projects that're using different SDKs.</p> <ul> <li>AspNet Core Web API</li> <li>Azure Functions</li> <li>Blazor WASM</li> <li>Class Library</li> </ul>"},{"location":"project-setup/shared-project/dtos/","title":"DTOs","text":"<p>You'd usually need two DTOs for any given entity, A Listing DTO, and an Upsert DTO.  </p> <p>Optionally, if you want to obfuscate the ID, you can decorate the ID property in your DTOs with an attribute that's inheriting <code>JsonHashIdConverterAttribute&lt;T&gt;</code> attribute.</p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u2502   \u251c\u2500\u2500 ActionTrees\n\u2502   \u251c\u2500\u2500 Constants\n\u2502   \u251c\u2500\u2500 DTOs\n\u2502       \u251c\u2500\u2500 ProductCategory\n\u2502           \u251c\u2500\u2500 _ProductCategoryHashId.cs   &lt;--- (Hash ID Attribute)\n\u2502           \u251c\u2500\u2500 ProductCategoryDTO.cs       &lt;--- (Upsert DTO)\n\u2502           \u251c\u2500\u2500 ProductCategoryListDTO.cs   &lt;--- (Listing DTO)\n\u2502   \u251c\u2500\u2500 Enums\n\u2502 \n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre>"},{"location":"project-setup/shared-project/dtos/#listing-dto","title":"Listing DTO","text":"<p>You usually don't need to display all the properties of an entity in a list. So you can create a DTO that only contains the properties you need to display.   </p> <p>A Listing DTO must inherit from <code>ShiftEntityListDTO</code> class. <pre><code>public class ProductCategoryListDTO : ShiftEntityListDTO\n{\n    [_ProductCategoryHashId]\n    public override string? ID { get; set; }\n\n    public string Name { get; set; } = default!;\n\n    public string? Description { get; set; }\n\n    public string? Code { get; set; }\n\n    [JsonConverter(typeof(JsonStringEnumConverter))]\n    public TrackingMethod? TrackingMethod { get; set; }\n}\n</code></pre></p>"},{"location":"project-setup/shared-project/dtos/#view-upsert-dto","title":"View &amp; Upsert DTO","text":"<p>A view &amp; upsert DTO is used for Insrting, Viewing, and Updating a single entity. It must inherit from <code>ShiftEntityViewAndUpsertDTO</code> class. <pre><code>public class ProductCategoryDTO : ShiftEntityViewAndUpsertDTO\n{\n    [_ProductCategoryHashId]\n    public override string? ID { get; set; }\n\n    [Required]\n    public string Name { get; set; } = default!;\n\n    public string? Description { get; set; }\n\n    public string? Code { get; set; }\n\n    [JsonConverter(typeof(JsonStringEnumConverter))]\n    [Range(1, int.MaxValue, ErrorMessage = \"Required\")]\n    public TrackingMethod TrackingMethod { get; set; }\n}\n</code></pre></p>"},{"location":"project-setup/shared-project/dtos/#hash-id-attribute","title":"Hash ID Attribute","text":"<p>Notice how the ID field in the DTOs are decorated with the <code>[_ProductCategoryHashId]</code> attribute. This can be used to obfuscate the ID of the entity. The attribute can be created by inheriting from <code>JsonHashIdConverterAttribute&lt;T&gt;</code></p> <pre><code>public class _ProductCategoryHashId : \n    JsonHashIdConverterAttribute&lt;_ProductCategoryHashId&gt;\n{\n    public _ProductCategoryHashId() : base(5) { }\n}\n</code></pre> <p>Note</p> <p><code>base(5)</code> is setting the minimum length of the Hash ID. This will change the IDs to random looking strings like (<code>0W8y9</code>, <code>GVApJ</code>) by using Hashids.net under the hood.</p>"},{"location":"project-setup/shared-project/dtos/#shift-entity-key-and-name","title":"Shift Entity Key And Name","text":"<p>There are certain features in the Framework that requires you to specify a Key and Name property for entities and DTOs.  </p> <p>This can be specified using the <code>ShiftEntityKeyAndName</code> attribute.</p> <pre><code>[ShiftEntityKeyAndName(nameof(ID), nameof(Name))]\npublic class ProductCategoryListDTO : ShiftEntityListDTO\n{\n    [_ProductCategoryHashId]\n    public override string? ID { get; set; }\n\n    public string Name { get; set; } = default!;\n\n    public string? Description { get; set; }\n\n    public string? Code { get; set; }\n\n    [JsonConverter(typeof(JsonStringEnumConverter))]\n    public TrackingMethod? TrackingMethod { get; set; }\n}\n</code></pre>"},{"location":"project-setup/shared-project/enums/","title":"Enums","text":"<p>Enums are placed directly under Shared/Enums folder or they're nested if needed.</p> <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API\n\u251c\u2500 StockPlusPlus.Data\n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u2502   \u251c\u2500\u2500 ActionTrees\n\u2502   \u251c\u2500\u2500 Constants\n\u2502   \u251c\u2500\u2500 DTOs\n\u2502   \u251c\u2500\u2500 Enums\n\u2502           \u251c\u2500\u2500 TrackingMethod.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre> <p></p> <p>Enums are simple by nature. There are only the below two special treatments that's usually needed when dealing with them in Shift Framework:</p>"},{"location":"project-setup/shared-project/enums/#1description-attribute","title":"1.Description Attribute","text":"<p>We usually put a [Description] attribute that's available in System.ComponentModel on the enum values to give them a friendly name. <pre><code>using System.ComponentModel;\n\nnamespace StockPlusPlus.Shared.Enums.Product;\n\npublic enum TrackingMethod\n{\n    [Description(\"Serial\")]\n    Serial = 1,\n\n    [Description(\"Batch/LOT\")]\n    Batch_LOT = 2,\n\n    [Description(\"Weight/Volume\")]\n    Weight_Volume = 3,\n\n    [Description(\"Kitting/Assembly\")]\n    Kitting_Assembly = 4,\n\n    [Description(\"No Tracking\")]\n    NoTracking = 5,\n}\n</code></pre></p> <p>Note</p> <p>The <code>Describe</code> extension method can be used on enum values to read the description string. <code>TrackingMethod.NoTracking.Describe()</code></p>"},{"location":"project-setup/shared-project/enums/#jsonconverter-attribute","title":"JsonConverter Attribute","text":"<p>When Enums are used in DTOs, They need to be decorated by [JsonConverter(typeof(JsonStringEnumConverter))] attribute.</p> <pre><code>public class ProductCategoryListDTO : ShiftEntityListDTO\n{\n    [_ProductCategoryHashId]\n    public override string? ID { get; set; }\n\n    public string Name { get; set; } = default!;\n\n    public string? Description { get; set; }\n\n    public string? Code { get; set; }\n\n    [JsonConverter(typeof(JsonStringEnumConverter))]\n    public TrackingMethod? TrackingMethod { get; set; }\n}\n</code></pre>"},{"location":"project-setup/test-project/collection-fixture/","title":"Collection Fixture","text":"<p>We can create a Collection Definition for the Custom Web Application Factory to decorate the test classes.</p> <pre><code>[CollectionDefinition(\"API Collection\")]\npublic class APICollection : ICollectionFixture&lt;CustomWebApplicationFactory&gt;\n{\n}\n</code></pre> <p>You can then use that to decorate your test classes.</p> <pre><code>[Collection(\"API Collection\")]\npublic class Test\n{\n    [Fact]\n    public void TestOne()\n    {\n    }\n}\n</code></pre>"},{"location":"project-setup/test-project/custom-web-application-factory/","title":"Custom Web Application Factory","text":"<p>The <code>ShiftSoftware.ShiftFrameworkTestingTools</code> package provides a custom WebApplicationFactory called <code>ShiftCustomWebApplicationFactory&lt;TStartup, DB&gt;</code> that can be used for integration testing against the API project.</p>"},{"location":"project-setup/test-project/custom-web-application-factory/#shiftcustomwebapplicationfactorywebmarker-db","title":"ShiftCustomWebApplicationFactory&lt;WebMarker, DB&gt;","text":"<pre><code>public class CustomWebApplicationFactory :\n    ShiftCustomWebApplicationFactory&lt;WebMarker, DB&gt;\n{\n    public CustomWebApplicationFactory() : base(\n        \"SQLServer_Test\",\n        new ShiftCustomWebApplicationBearerAuthSettings\n        {\n            Enabled = true,\n            TokenKeySettingKey = \"Settings:TokenSettings:Key\",\n            TokenIssuerSettingKey = \"Settings:TokenSettings:Issuer\",\n            TypeAuthActions = new List&lt;Type&gt;()\n            {\n                typeof(StockActionTrees)\n            }\n        })\n    { }\n}\n</code></pre>"},{"location":"project-setup/test-project/custom-web-application-factory/#app-settings","title":"App Settings","text":"<p>The constructor reads from appsettings. Below is a sample <code>appsettings.json</code> that should exist in the test project.</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"SQLServer_Test\": \"Server=localhost\\\\sqlexpress;Initial Catalog=StockPlusPlus_Test;Persist Security Info=True;Integrated Security=SSPI;TrustServerCertificate=True;\"\n  }\n}\n</code></pre>"},{"location":"project-setup/test-project/dependencies/","title":"Dependencies","text":"<p>The Test project does not heavily depend on the Shift Framework. But we do provide some basic tools.</p>"},{"location":"project-setup/test-project/dependencies/#project-dependencies","title":"Project Dependencies","text":"<p>The test project is referencing the API Project.  <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API        &lt;--- (Referenced by Test Directly)\n\u251c\u2500 StockPlusPlus.Data       &lt;--- (Referenced by Test via API Project)\n\u251c\u2500 StockPlusPlus.Functions\n\u251c\u2500 StockPlusPlus.Shared\n\u251c\u2500 StockPlusPlus.Test\n\u2502   \u251c\u2500\u2500 Tests\n\u2502   \u251c\u2500\u2500 appsettings.json\n\u2502   \u251c\u2500\u2500 CustomWebApplicationFactory.cs\n\u2502   \u251c\u2500\u2500 Using.cs\n\u2502 \n\u251c\u2500 StockPlusPlus.Web\n</code></pre></p>"},{"location":"project-setup/test-project/dependencies/#package-dependencies","title":"Package Dependencies","text":"<p>The Test project is using the below package from Shift Framework.  </p> <pre><code>ShiftSoftware.ShiftFrameworkTestingTools\n</code></pre> <pre><code>xunit.runner.visualstudio\n</code></pre> <p>Available as nuget packages:  ShiftSoftware.ShiftFrameworkTestingTools</p> <p>Warning</p> <p><code>ShiftSoftware.ShiftFrameworkTestingTools</code> uses <code>xunit</code> package internally. Make sure you use the same version of <code>xunit</code> in your test project.</p>"},{"location":"project-setup/test-project/test-case-orderer/","title":"Test Case Orderer","text":"<p>The <code>ShiftSoftware.ShiftFrameworkTestingTools</code> package includes attributes to decorate test calsses and test methods to control the serial execution of tests. </p>"},{"location":"project-setup/test-project/test-case-orderer/#testcaseorderer","title":"TestCaseOrderer","text":"<p>Should be placed on test classes.</p> <pre><code>using ShiftSoftware.ShiftFrameworkTestingTools;\n\nnamespace StockPlusPlus.Test.Tests;\n\n[TestCaseOrderer(Constants.OrdererTypeName, Constants.OrdererAssemblyName)]\npublic class Test\n{\n}\n</code></pre>"},{"location":"project-setup/test-project/test-case-orderer/#testpriority","title":"TestPriority","text":"<p>Should be placed on Test Methods</p> <pre><code>using ShiftSoftware.ShiftFrameworkTestingTools;\n\nnamespace StockPlusPlus.Test.Tests;\n\n[TestCaseOrderer(Constants.OrdererTypeName, Constants.OrdererAssemblyName)]\npublic class TestPriority\n{\n    private static int COUNT = 0;\n\n    [Fact]\n    [TestPriority(2)]\n    public void One()\n    {\n        COUNT++;\n\n        Assert.Equal(2, COUNT);\n    }\n\n    [Fact]\n    [TestPriority(1)]\n    public async Task Two()\n    {\n        COUNT++;\n\n        await Task.Delay(2000);\n\n        Assert.Equal(1, COUNT);\n    }\n}\n</code></pre>"},{"location":"project-setup/web-project/dependencies/","title":"Dependencies","text":"<p>The Web Project is the .NET 7 Blazor WASM Project.</p>"},{"location":"project-setup/web-project/dependencies/#project-dependencies","title":"Project Dependencies","text":"<p>The Web Project is referencing the Shared Project <pre><code>StockPlusPlus\n|\n\u251c\u2500 StockPlusPlus.API        \n\u251c\u2500 StockPlusPlus.Data\n\u251c\u2500 StockPlusPlus.Functions  \n\u251c\u2500 StockPlusPlus.Shared     &lt;--- (Referenced by Web Directly)\n\u251c\u2500 StockPlusPlus.Test\n\u251c\u2500 StockPlusPlus.Web\n</code></pre></p>"},{"location":"project-setup/web-project/dependencies/#package-dependencies","title":"Package Dependencies","text":"<p>The Web Project requires the following Shift Framework Packages.  </p> <pre><code>ShiftSoftware.ShiftBlazor\n</code></pre> <pre><code>ShiftSoftware.ShiftIdentity.Blazor\n</code></pre> <pre><code>ShiftSoftware.ShiftIdentity.Dashboard.Blazor\n</code></pre> <p>Warning</p> <p><code>ShiftSoftware.ShiftIdentity.Dashboard.Blazor</code> is only required if Shift Identity is included in your app. If you're using an External Shift Identity then no need to install this package.</p> <p>Available as nuget packages:  ShiftSoftware.ShiftBlazor </p> <p>ShiftSoftware.ShiftIdentity.Blazor </p> <p>ShiftSoftware.ShiftIdentity.Dashboard.Blazor</p>"},{"location":"project-setup/web-project/setup-and-configurations/","title":"Setup, Configurations","text":""},{"location":"project-setup/web-project/setup-and-configurations/#wwwrootindexhtml","title":"wwwroot/index.html","text":"<pre><code>&lt;head&gt;\n    &lt;!--The Rest of content inside the head section--&gt;\n\n    &lt;link href=\"_content/ShiftSoftware.ShiftBlazor/main.css\" rel=\"stylesheet\" /&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap\" rel=\"stylesheet\" /&gt;\n    &lt;link href=\"_content/MudBlazor/MudBlazor.min.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!--The Rest of content inside the body section--&gt;\n\n    &lt;script src=\"_content/MudBlazor/MudBlazor.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"_content/ShiftSoftware.ShiftBlazor/main.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"type-auth/intro/","title":"TypeAuth Intro","text":"<p>TypeAuth is a Hierarchical and Strongly-Typed Authorization System.   </p> <p>In TypeAuth system, permissions are called Actions and they're defined in classes that are called Action Trees</p>"},{"location":"type-auth/intro/#action-tree","title":"Action Tree","text":"<p>An Action Tree is a collection of related Actions (Permissions).</p> C# <pre><code>//Example of an ActionTree\n\n[ActionTree(\"Stock\", \"Actions Related to the Stock Module\")]\npublic class StockActions\n{\n    public readonly static ReadWriteDeleteAction Brand = new(\"Brand\");\n    public readonly static ReadWriteDeleteAction ProductCategory = new(\"Product Category\");\n    public readonly static ReadWriteDeleteAction Product = new(\"Product\");\n\n    public readonly static ReadWriteDeleteAction Country = new(\"Country\");\n\n    [ActionTree(\"Data Level Access\", \"Data Level or Row-Level Access\")]\n    public class DataLevelAccess\n    {\n        public readonly static DynamicReadWriteDeleteAction Brand = new(\"Brand\"); \n        public readonly static DynamicReadWriteDeleteAction ProductCategory = new(\"Product Category\"); \n    }\n}\n</code></pre>"},{"location":"type-auth/intro/#access-tree","title":"Access Tree","text":"<p>An Access Tree is a JSON representation of the Action Trees that specify access on the Actions.  A User (or any other sort of actor) may have one or more Access Trees. <pre><code>{\n    \"StockActions\": {\n        \"Brand\": ['r'],\n        \"ProductCategory\": ['r', 'w'],\n        \"Product\": ['r', 'w', 'd'],\n        \"DataLevelAccess\": {\n            \"Brand\": ['r', 'w', 'd']\n        }\n    }\n}\n</code></pre> In the above example, whoever has this Access Tree has below access</p> <ul> <li>Read Access on Brand</li> <li>Read/Write Access on ProductCategory</li> <li>Read/Write/Delete Access on Product</li> <li>No Access on Country</li> <li>Read/Write/Delete Access on DataLevelAccess.Brand</li> <li>No Access on DataLevelAccess.ProductCategory</li> </ul>"},{"location":"type-auth/intro/#wild-card-access","title":"Wild Card Access","text":"<p>Wild Card Access can be granted to entire Action Trees. the Access is applied to all existing, and future added Actions inside that Action Tree <pre><code>{\n    \"StockActions\": {\n        \"Brand\": ['r'],\n        \"ProductCategory\": ['r', 'w'],\n        \"Product\": ['r', 'w', 'd'],\n        \"DataLevelAccess\": ['r', 'w', 'd']\n    }\n}\n</code></pre> or <pre><code>{\n    \"StockActions\": ['r', 'w']\n}\n</code></pre></p>"}]}